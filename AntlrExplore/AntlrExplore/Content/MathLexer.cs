//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\crich\Documents\Coding\Fractals\Antlr-Exploration\AntlrExplore\AntlrExplore\Content\Math.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MathLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER=1, DOUBLE=2, LPAREN=3, RPAREN=4, POW=5, MUL=6, DIV=7, SUM=8, SUB=9, 
		NEWLINE=10, WS=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "DOUBLE", "LPAREN", "RPAREN", "POW", "MUL", "DIV", "SUM", "SUB", 
		"NEWLINE", "WS"
	};


	public MathLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "'^'", "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "DOUBLE", "LPAREN", "RPAREN", "POW", "MUL", "DIV", "SUM", 
		"SUB", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Math.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MathLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\r', '\x43', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x6', '\x2', '\x1B', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1C', '\x3', '\x3', '\x6', '\x3', 
		' ', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '!', '\x3', '\x3', '\x3', 
		'\x3', '\x6', '\x3', '&', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\'', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', ';', '\n', '\v', '\x3', '\f', '\x6', '\f', '>', 
		'\n', '\f', '\r', '\f', '\xE', '\f', '?', '\x3', '\f', '\x3', '\f', '\x2', 
		'\x2', '\r', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', 
		'\x17', '\r', '\x3', '\x2', '\x5', '\x3', '\x2', '\x32', ';', '\x4', '\x2', 
		'\f', '\f', '\xF', '\xF', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x2', 
		'G', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\a', ')', '\x3', '\x2', '\x2', 
		'\x2', '\t', '+', '\x3', '\x2', '\x2', '\x2', '\v', '-', '\x3', '\x2', 
		'\x2', '\x2', '\r', '/', '\x3', '\x2', '\x2', '\x2', '\xF', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x33', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x15', ':', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '=', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1B', '\t', 
		'\x2', '\x2', '\x2', '\x1A', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', ' ', '\t', '\x2', '\x2', '\x2', '\x1F', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '%', '\a', '\x30', '\x2', 
		'\x2', '$', '&', '\t', '\x2', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '\x6', '\x3', 
		'\x2', '\x2', '\x2', ')', '*', '\a', '*', '\x2', '\x2', '*', '\b', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\a', '+', '\x2', '\x2', ',', '\n', '\x3', 
		'\x2', '\x2', '\x2', '-', '.', '\a', '`', '\x2', '\x2', '.', '\f', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\a', ',', '\x2', '\x2', '\x30', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x31', '\x2', '\x2', 
		'\x32', '\x10', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', '-', 
		'\x2', '\x2', '\x34', '\x12', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', '/', '\x2', '\x2', '\x36', '\x14', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\xF', '\x2', '\x2', '\x38', ';', '\a', '\f', '\x2', '\x2', 
		'\x39', ';', '\t', '\x3', '\x2', '\x2', ':', '\x37', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '<', '>', '\t', '\x4', '\x2', '\x2', '=', '<', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\b', '\f', '\x2', '\x2', '\x42', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', '\x1C', '!', '\'', ':', 
		'?', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
